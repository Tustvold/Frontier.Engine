#ifndef IGLMOCK_H
#define IGLMOCK_H

#include "GL/glew.h"

#ifdef _WIN32
#	ifdef glmock_EXPORTS
#		define GLMOCKAPI __declspec(dllexport)
#	else
#		define GLMOCKAPI __declspec(dllimport)
#	endif
#else
#	define GLMOCKAPI
#endif // WIN32

// We can't link this DLL with glmock and declare the mock functions here as then glmock would be linked 
// into the DLL and also the test executable creating very hard to diagnose problems due to the way
// glmock and gltest utilise a number of static variables under the hood
class GLMOCKAPI IGLMock{
public:
	IGLMock();
	virtual ~IGLMock();

	static IGLMock* getMock();

	virtual void gl_Accum( GLenum op, GLfloat value) = 0;
	virtual void gl_AlphaFunc( GLenum func, GLclampf ref) = 0;
	virtual GLboolean gl_AreTexturesResident( GLsizei n, const GLuint * textures, GLboolean * residences) = 0;
	virtual void gl_ArrayElement( GLint i) = 0;
	virtual void gl_Begin( GLenum mode) = 0;
	virtual void gl_BindTexture( GLenum target, GLuint texture) = 0;
	virtual void gl_Bitmap( GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte * bitmap) = 0;
	virtual void gl_BlendFunc( GLenum sfactor, GLenum dfactor) = 0;
	virtual void gl_CallList( GLuint list) = 0;
	virtual void gl_CallLists( GLsizei n, GLenum type, const void * lists) = 0;
	virtual void gl_Clear( GLbitfield mask) = 0;
	virtual void gl_ClearAccum( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = 0;
	virtual void gl_ClearColor( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha) = 0;
	virtual void gl_ClearDepth( GLclampd depth) = 0;
	virtual void gl_ClearIndex( GLfloat c) = 0;
	virtual void gl_ClearStencil( GLint s) = 0;
	virtual void gl_ClipPlane( GLenum plane, const GLdouble * equation) = 0;
	virtual void gl_Color3b( GLbyte red, GLbyte green, GLbyte blue) = 0;
	virtual void gl_Color3bv( const GLbyte * v) = 0;
	virtual void gl_Color3d( GLdouble red, GLdouble green, GLdouble blue) = 0;
	virtual void gl_Color3dv( const GLdouble * v) = 0;
	virtual void gl_Color3f( GLfloat red, GLfloat green, GLfloat blue) = 0;
	virtual void gl_Color3fv( const GLfloat * v) = 0;
	virtual void gl_Color3i( GLint red, GLint green, GLint blue) = 0;
	virtual void gl_Color3iv( const GLint * v) = 0;
	virtual void gl_Color3s( GLshort red, GLshort green, GLshort blue) = 0;
	virtual void gl_Color3sv( const GLshort * v) = 0;
	virtual void gl_Color3ub( GLubyte red, GLubyte green, GLubyte blue) = 0;
	virtual void gl_Color3ubv( const GLubyte * v) = 0;
	virtual void gl_Color3ui( GLuint red, GLuint green, GLuint blue) = 0;
	virtual void gl_Color3uiv( const GLuint * v) = 0;
	virtual void gl_Color3us( GLushort red, GLushort green, GLushort blue) = 0;
	virtual void gl_Color3usv( const GLushort * v) = 0;
	virtual void gl_Color4b( GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha) = 0;
	virtual void gl_Color4bv( const GLbyte * v) = 0;
	virtual void gl_Color4d( GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha) = 0;
	virtual void gl_Color4dv( const GLdouble * v) = 0;
	virtual void gl_Color4f( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) = 0;
	virtual void gl_Color4fv( const GLfloat * v) = 0;
	virtual void gl_Color4i( GLint red, GLint green, GLint blue, GLint alpha) = 0;
	virtual void gl_Color4iv( const GLint * v) = 0;
	virtual void gl_Color4s( GLshort red, GLshort green, GLshort blue, GLshort alpha) = 0;
	virtual void gl_Color4sv( const GLshort * v) = 0;
	virtual void gl_Color4ub( GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha) = 0;
	virtual void gl_Color4ubv( const GLubyte * v) = 0;
	virtual void gl_Color4ui( GLuint red, GLuint green, GLuint blue, GLuint alpha) = 0;
	virtual void gl_Color4uiv( const GLuint * v) = 0;
	virtual void gl_Color4us( GLushort red, GLushort green, GLushort blue, GLushort alpha) = 0;
	virtual void gl_Color4usv( const GLushort * v) = 0;
	virtual void gl_ColorMask( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha) = 0;
	virtual void gl_ColorMaterial( GLenum face, GLenum mode) = 0;
	virtual void gl_ColorPointer( GLint size, GLenum type, GLsizei stride, const void * pointer) = 0;
	virtual void gl_CopyPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum type) = 0;
	virtual void gl_CopyTexImage1D( GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLint border) = 0;
	virtual void gl_CopyTexImage2D( GLenum target, GLint level, GLenum internalFormat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border) = 0;
	virtual void gl_CopyTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width) = 0;
	virtual void gl_CopyTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height) = 0;
	virtual void gl_CullFace( GLenum mode) = 0;
	virtual void gl_DeleteLists( GLuint list, GLsizei range) = 0;
	virtual void gl_DeleteTextures( GLsizei n, const GLuint * textures) = 0;
	virtual void gl_DepthFunc( GLenum func) = 0;
	virtual void gl_DepthMask( GLboolean flag) = 0;
	virtual void gl_DepthRange( GLclampd zNear, GLclampd zFar) = 0;
	virtual void gl_Disable( GLenum cap) = 0;
	virtual void gl_DisableClientState( GLenum array) = 0;
	virtual void gl_DrawArrays( GLenum mode, GLint first, GLsizei count) = 0;
	virtual void gl_DrawBuffer( GLenum mode) = 0;
	virtual void gl_DrawElements( GLenum mode, GLsizei count, GLenum type, const void * indices) = 0;
	virtual void gl_DrawPixels( GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) = 0;
	virtual void gl_EdgeFlag( GLboolean flag) = 0;
	virtual void gl_EdgeFlagPointer( GLsizei stride, const void * pointer) = 0;
	virtual void gl_EdgeFlagv( const GLboolean * flag) = 0;
	virtual void gl_Enable( GLenum cap) = 0;
	virtual void gl_EnableClientState( GLenum array) = 0;
	virtual void gl_End( ) = 0;
	virtual void gl_EndList( ) = 0;
	virtual void gl_EvalCoord1d( GLdouble u) = 0;
	virtual void gl_EvalCoord1dv( const GLdouble * u) = 0;
	virtual void gl_EvalCoord1f( GLfloat u) = 0;
	virtual void gl_EvalCoord1fv( const GLfloat * u) = 0;
	virtual void gl_EvalCoord2d( GLdouble u, GLdouble v) = 0;
	virtual void gl_EvalCoord2dv( const GLdouble * u) = 0;
	virtual void gl_EvalCoord2f( GLfloat u, GLfloat v) = 0;
	virtual void gl_EvalCoord2fv( const GLfloat * u) = 0;
	virtual void gl_EvalMesh1( GLenum mode, GLint i1, GLint i2) = 0;
	virtual void gl_EvalMesh2( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2) = 0;
	virtual void gl_EvalPoint1( GLint i) = 0;
	virtual void gl_EvalPoint2( GLint i, GLint j) = 0;
	virtual void gl_FeedbackBuffer( GLsizei size, GLenum type, GLfloat * buffer) = 0;
	virtual void gl_Finish( ) = 0;
	virtual void gl_Flush( ) = 0;
	virtual void gl_Fogf( GLenum pname, GLfloat param) = 0;
	virtual void gl_Fogfv( GLenum pname, const GLfloat * params) = 0;
	virtual void gl_Fogi( GLenum pname, GLint param) = 0;
	virtual void gl_Fogiv( GLenum pname, const GLint * params) = 0;
	virtual void gl_FrontFace( GLenum mode) = 0;
	virtual void gl_Frustum( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) = 0;
	virtual GLuint gl_GenLists( GLsizei range) = 0;
	virtual void gl_GenTextures( GLsizei n, GLuint * textures) = 0;
	virtual void gl_GetBooleanv( GLenum pname, GLboolean * params) = 0;
	virtual void gl_GetClipPlane( GLenum plane, GLdouble * equation) = 0;
	virtual void gl_GetDoublev( GLenum pname, GLdouble * params) = 0;
	virtual GLenum gl_GetError( ) = 0;
	virtual void gl_GetFloatv( GLenum pname, GLfloat * params) = 0;
	virtual void gl_GetIntegerv( GLenum pname, GLint * params) = 0;
	virtual void gl_GetLightfv( GLenum light, GLenum pname, GLfloat * params) = 0;
	virtual void gl_GetLightiv( GLenum light, GLenum pname, GLint * params) = 0;
	virtual void gl_GetMapdv( GLenum target, GLenum query, GLdouble * v) = 0;
	virtual void gl_GetMapfv( GLenum target, GLenum query, GLfloat * v) = 0;
	virtual void gl_GetMapiv( GLenum target, GLenum query, GLint * v) = 0;
	virtual void gl_GetMaterialfv( GLenum face, GLenum pname, GLfloat * params) = 0;
	virtual void gl_GetMaterialiv( GLenum face, GLenum pname, GLint * params) = 0;
	virtual void gl_GetPixelMapfv( GLenum map, GLfloat * values) = 0;
	virtual void gl_GetPixelMapuiv( GLenum map, GLuint * values) = 0;
	virtual void gl_GetPixelMapusv( GLenum map, GLushort * values) = 0;
	virtual void gl_GetPointerv( GLenum pname, void ** params) = 0;
	virtual void gl_GetPolygonStipple( GLubyte * mask) = 0;
	virtual const GLubyte *  gl_GetString( GLenum name) = 0;
	virtual void gl_GetTexEnvfv( GLenum target, GLenum pname, GLfloat * params) = 0;
	virtual void gl_GetTexEnviv( GLenum target, GLenum pname, GLint * params) = 0;
	virtual void gl_GetTexGendv( GLenum coord, GLenum pname, GLdouble * params) = 0;
	virtual void gl_GetTexGenfv( GLenum coord, GLenum pname, GLfloat * params) = 0;
	virtual void gl_GetTexGeniv( GLenum coord, GLenum pname, GLint * params) = 0;
	virtual void gl_GetTexImage( GLenum target, GLint level, GLenum format, GLenum type, void * pixels) = 0;
	virtual void gl_GetTexLevelParameterfv( GLenum target, GLint level, GLenum pname, GLfloat * params) = 0;
	virtual void gl_GetTexLevelParameteriv( GLenum target, GLint level, GLenum pname, GLint * params) = 0;
	virtual void gl_GetTexParameterfv( GLenum target, GLenum pname, GLfloat * params) = 0;
	virtual void gl_GetTexParameteriv( GLenum target, GLenum pname, GLint * params) = 0;
	virtual void gl_Hint( GLenum target, GLenum mode) = 0;
	virtual void gl_IndexMask( GLuint mask) = 0;
	virtual void gl_IndexPointer( GLenum type, GLsizei stride, const void * pointer) = 0;
	virtual void gl_Indexd( GLdouble c) = 0;
	virtual void gl_Indexdv( const GLdouble * c) = 0;
	virtual void gl_Indexf( GLfloat c) = 0;
	virtual void gl_Indexfv( const GLfloat * c) = 0;
	virtual void gl_Indexi( GLint c) = 0;
	virtual void gl_Indexiv( const GLint * c) = 0;
	virtual void gl_Indexs( GLshort c) = 0;
	virtual void gl_Indexsv( const GLshort * c) = 0;
	virtual void gl_Indexub( GLubyte c) = 0;
	virtual void gl_Indexubv( const GLubyte * c) = 0;
	virtual void gl_InitNames( ) = 0;
	virtual void gl_InterleavedArrays( GLenum format, GLsizei stride, const void * pointer) = 0;
	virtual GLboolean gl_IsEnabled( GLenum cap) = 0;
	virtual GLboolean gl_IsList( GLuint list) = 0;
	virtual GLboolean gl_IsTexture( GLuint texture) = 0;
	virtual void gl_LightModelf( GLenum pname, GLfloat param) = 0;
	virtual void gl_LightModelfv( GLenum pname, const GLfloat * params) = 0;
	virtual void gl_LightModeli( GLenum pname, GLint param) = 0;
	virtual void gl_LightModeliv( GLenum pname, const GLint * params) = 0;
	virtual void gl_Lightf( GLenum light, GLenum pname, GLfloat param) = 0;
	virtual void gl_Lightfv( GLenum light, GLenum pname, const GLfloat * params) = 0;
	virtual void gl_Lighti( GLenum light, GLenum pname, GLint param) = 0;
	virtual void gl_Lightiv( GLenum light, GLenum pname, const GLint * params) = 0;
	virtual void gl_LineStipple( GLint factor, GLushort pattern) = 0;
	virtual void gl_LineWidth( GLfloat width) = 0;
	virtual void gl_ListBase( GLuint base) = 0;
	virtual void gl_LoadIdentity( ) = 0;
	virtual void gl_LoadMatrixd( const GLdouble * m) = 0;
	virtual void gl_LoadMatrixf( const GLfloat * m) = 0;
	virtual void gl_LoadName( GLuint name) = 0;
	virtual void gl_LogicOp( GLenum opcode) = 0;
	virtual void gl_Map1d( GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble * points) = 0;
	virtual void gl_Map1f( GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat * points) = 0;
	virtual void gl_Map2d( GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble * points) = 0;
	virtual void gl_Map2f( GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat * points) = 0;
	virtual void gl_MapGrid1d( GLint un, GLdouble u1, GLdouble u2) = 0;
	virtual void gl_MapGrid1f( GLint un, GLfloat u1, GLfloat u2) = 0;
	virtual void gl_MapGrid2d( GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2) = 0;
	virtual void gl_MapGrid2f( GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2) = 0;
	virtual void gl_Materialf( GLenum face, GLenum pname, GLfloat param) = 0;
	virtual void gl_Materialfv( GLenum face, GLenum pname, const GLfloat * params) = 0;
	virtual void gl_Materiali( GLenum face, GLenum pname, GLint param) = 0;
	virtual void gl_Materialiv( GLenum face, GLenum pname, const GLint * params) = 0;
	virtual void gl_MatrixMode( GLenum mode) = 0;
	virtual void gl_MultMatrixd( const GLdouble * m) = 0;
	virtual void gl_MultMatrixf( const GLfloat * m) = 0;
	virtual void gl_NewList( GLuint list, GLenum mode) = 0;
	virtual void gl_Normal3b( GLbyte nx, GLbyte ny, GLbyte nz) = 0;
	virtual void gl_Normal3bv( const GLbyte * v) = 0;
	virtual void gl_Normal3d( GLdouble nx, GLdouble ny, GLdouble nz) = 0;
	virtual void gl_Normal3dv( const GLdouble * v) = 0;
	virtual void gl_Normal3f( GLfloat nx, GLfloat ny, GLfloat nz) = 0;
	virtual void gl_Normal3fv( const GLfloat * v) = 0;
	virtual void gl_Normal3i( GLint nx, GLint ny, GLint nz) = 0;
	virtual void gl_Normal3iv( const GLint * v) = 0;
	virtual void gl_Normal3s( GLshort nx, GLshort ny, GLshort nz) = 0;
	virtual void gl_Normal3sv( const GLshort * v) = 0;
	virtual void gl_NormalPointer( GLenum type, GLsizei stride, const void * pointer) = 0;
	virtual void gl_Ortho( GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar) = 0;
	virtual void gl_PassThrough( GLfloat token) = 0;
	virtual void gl_PixelMapfv( GLenum map, GLsizei mapsize, const GLfloat * values) = 0;
	virtual void gl_PixelMapuiv( GLenum map, GLsizei mapsize, const GLuint * values) = 0;
	virtual void gl_PixelMapusv( GLenum map, GLsizei mapsize, const GLushort * values) = 0;
	virtual void gl_PixelStoref( GLenum pname, GLfloat param) = 0;
	virtual void gl_PixelStorei( GLenum pname, GLint param) = 0;
	virtual void gl_PixelTransferf( GLenum pname, GLfloat param) = 0;
	virtual void gl_PixelTransferi( GLenum pname, GLint param) = 0;
	virtual void gl_PixelZoom( GLfloat xfactor, GLfloat yfactor) = 0;
	virtual void gl_PointSize( GLfloat size) = 0;
	virtual void gl_PolygonMode( GLenum face, GLenum mode) = 0;
	virtual void gl_PolygonOffset( GLfloat factor, GLfloat units) = 0;
	virtual void gl_PolygonStipple( const GLubyte * mask) = 0;
	virtual void gl_PopAttrib( ) = 0;
	virtual void gl_PopClientAttrib( ) = 0;
	virtual void gl_PopMatrix( ) = 0;
	virtual void gl_PopName( ) = 0;
	virtual void gl_PrioritizeTextures( GLsizei n, const GLuint * textures, const GLclampf * priorities) = 0;
	virtual void gl_PushAttrib( GLbitfield mask) = 0;
	virtual void gl_PushClientAttrib( GLbitfield mask) = 0;
	virtual void gl_PushMatrix( ) = 0;
	virtual void gl_PushName( GLuint name) = 0;
	virtual void gl_RasterPos2d( GLdouble x, GLdouble y) = 0;
	virtual void gl_RasterPos2dv( const GLdouble * v) = 0;
	virtual void gl_RasterPos2f( GLfloat x, GLfloat y) = 0;
	virtual void gl_RasterPos2fv( const GLfloat * v) = 0;
	virtual void gl_RasterPos2i( GLint x, GLint y) = 0;
	virtual void gl_RasterPos2iv( const GLint * v) = 0;
	virtual void gl_RasterPos2s( GLshort x, GLshort y) = 0;
	virtual void gl_RasterPos2sv( const GLshort * v) = 0;
	virtual void gl_RasterPos3d( GLdouble x, GLdouble y, GLdouble z) = 0;
	virtual void gl_RasterPos3dv( const GLdouble * v) = 0;
	virtual void gl_RasterPos3f( GLfloat x, GLfloat y, GLfloat z) = 0;
	virtual void gl_RasterPos3fv( const GLfloat * v) = 0;
	virtual void gl_RasterPos3i( GLint x, GLint y, GLint z) = 0;
	virtual void gl_RasterPos3iv( const GLint * v) = 0;
	virtual void gl_RasterPos3s( GLshort x, GLshort y, GLshort z) = 0;
	virtual void gl_RasterPos3sv( const GLshort * v) = 0;
	virtual void gl_RasterPos4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w) = 0;
	virtual void gl_RasterPos4dv( const GLdouble * v) = 0;
	virtual void gl_RasterPos4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w) = 0;
	virtual void gl_RasterPos4fv( const GLfloat * v) = 0;
	virtual void gl_RasterPos4i( GLint x, GLint y, GLint z, GLint w) = 0;
	virtual void gl_RasterPos4iv( const GLint * v) = 0;
	virtual void gl_RasterPos4s( GLshort x, GLshort y, GLshort z, GLshort w) = 0;
	virtual void gl_RasterPos4sv( const GLshort * v) = 0;
	virtual void gl_ReadBuffer( GLenum mode) = 0;
	virtual void gl_ReadPixels( GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void * pixels) = 0;
	virtual void gl_Rectd( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2) = 0;
	virtual void gl_Rectdv( const GLdouble * v1, const GLdouble * v2) = 0;
	virtual void gl_Rectf( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2) = 0;
	virtual void gl_Rectfv( const GLfloat * v1, const GLfloat * v2) = 0;
	virtual void gl_Recti( GLint x1, GLint y1, GLint x2, GLint y2) = 0;
	virtual void gl_Rectiv( const GLint * v1, const GLint * v2) = 0;
	virtual void gl_Rects( GLshort x1, GLshort y1, GLshort x2, GLshort y2) = 0;
	virtual void gl_Rectsv( const GLshort * v1, const GLshort * v2) = 0;
	virtual GLint gl_RenderMode( GLenum mode) = 0;
	virtual void gl_Rotated( GLdouble angle, GLdouble x, GLdouble y, GLdouble z) = 0;
	virtual void gl_Rotatef( GLfloat angle, GLfloat x, GLfloat y, GLfloat z) = 0;
	virtual void gl_Scaled( GLdouble x, GLdouble y, GLdouble z) = 0;
	virtual void gl_Scalef( GLfloat x, GLfloat y, GLfloat z) = 0;
	virtual void gl_Scissor( GLint x, GLint y, GLsizei width, GLsizei height) = 0;
	virtual void gl_SelectBuffer( GLsizei size, GLuint * buffer) = 0;
	virtual void gl_ShadeModel( GLenum mode) = 0;
	virtual void gl_StencilFunc( GLenum func, GLint ref, GLuint mask) = 0;
	virtual void gl_StencilMask( GLuint mask) = 0;
	virtual void gl_StencilOp( GLenum fail, GLenum zfail, GLenum zpass) = 0;
	virtual void gl_TexCoord1d( GLdouble s) = 0;
	virtual void gl_TexCoord1dv( const GLdouble * v) = 0;
	virtual void gl_TexCoord1f( GLfloat s) = 0;
	virtual void gl_TexCoord1fv( const GLfloat * v) = 0;
	virtual void gl_TexCoord1i( GLint s) = 0;
	virtual void gl_TexCoord1iv( const GLint * v) = 0;
	virtual void gl_TexCoord1s( GLshort s) = 0;
	virtual void gl_TexCoord1sv( const GLshort * v) = 0;
	virtual void gl_TexCoord2d( GLdouble s, GLdouble t) = 0;
	virtual void gl_TexCoord2dv( const GLdouble * v) = 0;
	virtual void gl_TexCoord2f( GLfloat s, GLfloat t) = 0;
	virtual void gl_TexCoord2fv( const GLfloat * v) = 0;
	virtual void gl_TexCoord2i( GLint s, GLint t) = 0;
	virtual void gl_TexCoord2iv( const GLint * v) = 0;
	virtual void gl_TexCoord2s( GLshort s, GLshort t) = 0;
	virtual void gl_TexCoord2sv( const GLshort * v) = 0;
	virtual void gl_TexCoord3d( GLdouble s, GLdouble t, GLdouble r) = 0;
	virtual void gl_TexCoord3dv( const GLdouble * v) = 0;
	virtual void gl_TexCoord3f( GLfloat s, GLfloat t, GLfloat r) = 0;
	virtual void gl_TexCoord3fv( const GLfloat * v) = 0;
	virtual void gl_TexCoord3i( GLint s, GLint t, GLint r) = 0;
	virtual void gl_TexCoord3iv( const GLint * v) = 0;
	virtual void gl_TexCoord3s( GLshort s, GLshort t, GLshort r) = 0;
	virtual void gl_TexCoord3sv( const GLshort * v) = 0;
	virtual void gl_TexCoord4d( GLdouble s, GLdouble t, GLdouble r, GLdouble q) = 0;
	virtual void gl_TexCoord4dv( const GLdouble * v) = 0;
	virtual void gl_TexCoord4f( GLfloat s, GLfloat t, GLfloat r, GLfloat q) = 0;
	virtual void gl_TexCoord4fv( const GLfloat * v) = 0;
	virtual void gl_TexCoord4i( GLint s, GLint t, GLint r, GLint q) = 0;
	virtual void gl_TexCoord4iv( const GLint * v) = 0;
	virtual void gl_TexCoord4s( GLshort s, GLshort t, GLshort r, GLshort q) = 0;
	virtual void gl_TexCoord4sv( const GLshort * v) = 0;
	virtual void gl_TexCoordPointer( GLint size, GLenum type, GLsizei stride, const void * pointer) = 0;
	virtual void gl_TexEnvf( GLenum target, GLenum pname, GLfloat param) = 0;
	virtual void gl_TexEnvfv( GLenum target, GLenum pname, const GLfloat * params) = 0;
	virtual void gl_TexEnvi( GLenum target, GLenum pname, GLint param) = 0;
	virtual void gl_TexEnviv( GLenum target, GLenum pname, const GLint * params) = 0;
	virtual void gl_TexGend( GLenum coord, GLenum pname, GLdouble param) = 0;
	virtual void gl_TexGendv( GLenum coord, GLenum pname, const GLdouble * params) = 0;
	virtual void gl_TexGenf( GLenum coord, GLenum pname, GLfloat param) = 0;
	virtual void gl_TexGenfv( GLenum coord, GLenum pname, const GLfloat * params) = 0;
	virtual void gl_TexGeni( GLenum coord, GLenum pname, GLint param) = 0;
	virtual void gl_TexGeniv( GLenum coord, GLenum pname, const GLint * params) = 0;
	virtual void gl_TexImage1D( GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void * pixels) = 0;
	virtual void gl_TexImage2D( GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void * pixels) = 0;
	virtual void gl_TexParameterf( GLenum target, GLenum pname, GLfloat param) = 0;
	virtual void gl_TexParameterfv( GLenum target, GLenum pname, const GLfloat * params) = 0;
	virtual void gl_TexParameteri( GLenum target, GLenum pname, GLint param) = 0;
	virtual void gl_TexParameteriv( GLenum target, GLenum pname, const GLint * params) = 0;
	virtual void gl_TexSubImage1D( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels) = 0;
	virtual void gl_TexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels) = 0;
	virtual void gl_Translated( GLdouble x, GLdouble y, GLdouble z) = 0;
	virtual void gl_Translatef( GLfloat x, GLfloat y, GLfloat z) = 0;
	virtual void gl_Vertex2d( GLdouble x, GLdouble y) = 0;
	virtual void gl_Vertex2dv( const GLdouble * v) = 0;
	virtual void gl_Vertex2f( GLfloat x, GLfloat y) = 0;
	virtual void gl_Vertex2fv( const GLfloat * v) = 0;
	virtual void gl_Vertex2i( GLint x, GLint y) = 0;
	virtual void gl_Vertex2iv( const GLint * v) = 0;
	virtual void gl_Vertex2s( GLshort x, GLshort y) = 0;
	virtual void gl_Vertex2sv( const GLshort * v) = 0;
	virtual void gl_Vertex3d( GLdouble x, GLdouble y, GLdouble z) = 0;
	virtual void gl_Vertex3dv( const GLdouble * v) = 0;
	virtual void gl_Vertex3f( GLfloat x, GLfloat y, GLfloat z) = 0;
	virtual void gl_Vertex3fv( const GLfloat * v) = 0;
	virtual void gl_Vertex3i( GLint x, GLint y, GLint z) = 0;
	virtual void gl_Vertex3iv( const GLint * v) = 0;
	virtual void gl_Vertex3s( GLshort x, GLshort y, GLshort z) = 0;
	virtual void gl_Vertex3sv( const GLshort * v) = 0;
	virtual void gl_Vertex4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w) = 0;
	virtual void gl_Vertex4dv( const GLdouble * v) = 0;
	virtual void gl_Vertex4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w) = 0;
	virtual void gl_Vertex4fv( const GLfloat * v) = 0;
	virtual void gl_Vertex4i( GLint x, GLint y, GLint z, GLint w) = 0;
	virtual void gl_Vertex4iv( const GLint * v) = 0;
	virtual void gl_Vertex4s( GLshort x, GLshort y, GLshort z, GLshort w) = 0;
	virtual void gl_Vertex4sv( const GLshort * v) = 0;
	virtual void gl_VertexPointer( GLint size, GLenum type, GLsizei stride, const void * pointer) = 0;
	virtual void gl_Viewport( GLint x, GLint y, GLsizei width, GLsizei height) = 0;
};


#endif
